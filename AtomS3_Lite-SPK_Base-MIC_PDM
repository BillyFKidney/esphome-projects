# https://docs.m5stack.com/en/core/AtomS3%20Lite
substitutions:
  device_name: "m5stack-atoms3-lite-va"
  device_friendly_name: "AtomS3 Lite Voice Assist"
  device_description: "M5Stack AtomS3 Lite connected to an ATOM Speaker and PDM Mic"

  voice_assist_idle_phase_id: '1'
  voice_assist_listening_phase_id: '2'
  voice_assist_thinking_phase_id: '3'
  voice_assist_replying_phase_id: '4'
  voice_assist_not_ready_phase_id: '10'
  voice_assist_error_phase_id: '11'  
  voice_assist_muted_phase_id: '12'

       
esphome:
  name: ${device_name}
  friendly_name: ${device_friendly_name}
  name_add_mac_suffix: true
  comment: ${device_description}
  project:
    name: m5stack.atoms3-lite-spk_base-pdm_mic
    version: "1.0.0"
  min_version: 2023.5.0

esp32:
  board: esp32-s3-devkitc-1
  framework:
    type: arduino


# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: "7G4nZXHOi/ShTqV/IHZwHTNbHw3VXbfbAHYfyPLu7YA="

ota:
  password: "8661b625b91ec08181906eb7d630c34b"

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  on_connect:
    - delay: 10s  # Gives time for improv results to be transmitted
    - ble.disable:
  on_disconnect:
    - ble.enable: # Enables BLE so that device can be configured


  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "S3Lite Fallback Hotspot"
    password: "yKfki7Lt6f6x"

captive_portal:

improv_serial:

esp32_improv:
  authorizer: none


i2s_audio:
  - id: mic_adc
    i2s_lrclk_pin: GPIO01  # dWord Select aka left/right clock aka LRCL
  - id: spk_adc
    i2s_lrclk_pin: GPIO039
    i2s_bclk_pin: GPIO05

microphone:
  - platform: i2s_audio
    id: pdm_microphone
    i2s_din_pin: GPIO02
    use_apll: true
    adc_type: external
    channel: right
    sample_rate: 44100
    bits_per_sample: 16bit
    i2s_audio_id: mic_adc
    pdm: true

media_player:
  - platform: i2s_audio
    id: media_out
    name: none
    dac_type: external
    i2s_audio_id: spk_adc
    i2s_dout_pin: GPIO38
    mode: mono

voice_assistant:
  microphone: pdm_microphone
  on_start:
    - light.turn_on:
        id: led
        blue: 100%
        red: 0%
        green: 0%
        effect: none
  on_tts_start:
    - light.turn_on:
        id: led
        blue: 0%
        red: 0%
        green: 100%
        effect: none
  on_tts_end:
    - media_player.play_media: !lambda return x;
    - light.turn_on:
        id: led
        blue: 0%
        red: 0%
        green: 100%
        effect: "Slow Pulse"
  on_end:
    - delay: 1s
    - wait_until:
        not:
          media_player.is_playing: media_out
    - script.execute: reset_led
  on_error:
    - light.turn_on:
        id: led
        red: 100%
        green: 0%
        blue: 0%
        brightness: 100%
        effect: "Fast Pulse"
    - delay: 1s
    - script.execute: reset_led


light:
  #G35=RGB WS2812C-2020
  - platform: esp32_rmt_led_strip
    rgb_order: GRB
    pin: 35
    num_leds: 4
    default_transition_length: 0s
    # RMT 0 channels will be occupied by IR
    rmt_channel: 1
    chipset: ws2812
    id: led
    name: "LED"
    effects:
      - pulse:
          name: "Slow Pulse"
          transition_length: 250ms
          update_interval: 250ms
          min_brightness: 50%
          max_brightness: 100%
      - pulse:
          name: "Fast Pulse"
          transition_length: 100ms
          update_interval: 100ms
          min_brightness: 50%
          max_brightness: 100%

script:
  - id: reset_led
    then:
      - light.turn_off: led

#G41=Button
binary_sensor:
  - platform: gpio
    name: Button
    pin:
      number: GPIO41
      inverted: true
    id: echo_button
    on_multi_click:
      - timing:
          - ON FOR AT MOST 350ms
          - OFF FOR AT LEAST 10ms
        then:
          - media_player.toggle: media_out
      - timing:
          - ON FOR AT LEAST 350ms
        then:
          - voice_assistant.start:
      - timing:
          - ON FOR AT LEAST 350ms
          - OFF FOR AT LEAST 10ms
        then:
          - voice_assistant.stop:
